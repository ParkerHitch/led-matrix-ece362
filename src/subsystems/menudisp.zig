const microzig = @import("microzig");
const std = @import("std");
const cImport = @import("../cImport.zig");
const peripherals = microzig.chip.peripherals;
const periph_types = microzig.chip.types.peripherals;
const RCC = peripherals.RCC;
const SPI2 = peripherals.SPI2;
const GPIOA = peripherals.GPIOA;
const GPIOB = peripherals.GPIOB;

// Constants for all the colors we can use :p
pub const WHITE = 0xFFFF;
pub const BLACK = 0x0000;
pub const BLUE = 0x001F;
pub const YELLOW = 0xFFE0;
pub const GBLUE = 0x07FF;
pub const RED = 0xF800;
pub const MAGENTA = 0xF81F;
pub const GREEN = 0x07E0;
pub const CYAN = 0x7FFF;
pub const BROWN = 0xBC40;
pub const BRRED = 0xFC07;
pub const GRAY = 0x8430;
pub const DARKBLUE = 0x01CF;
pub const LIGHTBLUE = 0x7D7C;
pub const GRAYBLUE = 0x5458;
pub const LIGHTGREEN = 0x841F;
pub const LIGHTGRAY = 0xEF5B;
pub const LGRAY = 0xC618;
pub const LGRAYBLUE = 0xA651;
pub const LBBLUE = 0x2B12;

// Constants for the LCD Display
const LCD_W = 240;
const LCD_H = 320;

pub const lcd_dev_t = struct {
    width: u16 = 0,
    height: u16 = 0,
    id: u16 = 0,
    dir: u8 = 0,
    wramcmd: u8 = 0,
    setxcmd: u8 = 0,
    setycmd: u8 = 0,
    reset: *const fn (i8) void = tft_reset,
    select: *const fn (i8) void = tft_reg_select,
    reg_select: *const fn (i8) void = tft_select,
};

pub var lcddev: lcd_dev_t = .{};
pub var APP_NUM: u32 = 0; // stores where # of app program is app
pub var RUNNING_APP: u1 = 0; // 0 = on menu, 1 = running app
pub var MAXAPPS: u32 = 10; // read the name
pub var APPLIST: [][]const u8 = undefined; // acts like application struct for now
pub var MENU: []const u8 = "Select App:"; // text for menu

pub fn tft_select(val: i8) void {
    if (val == 0) {
        // while ((SPI2.SR.read()) & (SPI2.SR.read().BSY == 1)) {}
        while (SPI2.SR.read().BSY == 1) {}
        GPIOB.BSRR.modify(.{
            .@"BS[10]" = 1,
        });
    } else {
        while ((GPIOB.ODR.read().@"ODR[10]") == .Low) {}
        GPIOB.BSRR.modify(.{
            .@"BR[10]" = 1,
        });
    }
}

// If val is non-zero, set nRESET low to reset the display.
pub fn tft_reset(val: i8) void {
    if (val != 0) {
        GPIOB.BSRR.modify(.{
            .@"BR[11]" = 1,
        });
    } else {
        GPIOB.BSRR.modify(.{
            .@"BS[11]" = 1,
        });
    }
}

pub fn tft_reg_select(val: i8) void {
    if (val == 1) { // select registers
        // clear
        GPIOB.BSRR.modify(.{
            .@"BR[12]" = 1,
        });
    } else { // select data
        // set
        GPIOB.BSRR.modify(.{
            .@"BS[12]" = 1,
        });
    }
}

// resets lcd
pub fn LCD_Reset() void {
    lcddev.reset(1); // Assert reset
    cImport.nano_wait(100000000); // Wait
    lcddev.reset(0); // De-assert reset
    cImport.nano_wait(50000000); // Wait
}

// selects register of lcd display to change
pub fn LCD_WR_REG(data: u8) void {
    while ((SPI2.SR.read().BSY == 1) != false) {}
    // Don't clear RS until the previous operation is done.
    lcddev.reg_select(1);
    SPI2.DR16 = data;
}

// Write 8-bit data to the LCD
pub fn LCD_WR_DATA(data: u8) void {
    while ((SPI2.SR.read().BSY == 1) != false) {}
    // Don't set RS until the previous operation is done.
    lcddev.reg_select(0);
    SPI2.DR16 = data;
}

// dunno the point of this
pub fn lcd_WriteReg(lcd_reg: u8, lcd_RegValue: u8) void {
    LCD_WR_REG(lcd_reg);
    LCD_WR_DATA(lcd_RegValue);
}

// i didn't know this existed before doing all the font manuevering/rotating imma kms
pub fn LCD_direction(direction: u8) void {
    lcddev.setxcmd = 0x2A;
    lcddev.setycmd = 0x2B;
    lcddev.wramcmd = 0x2C;
    switch (direction) {
        0 => {
            lcddev.width = LCD_W;
            lcddev.height = LCD_H;
            lcd_WriteReg(0x36, (1 << 3) | (0 << 6) | (0 << 7)); //BGR==1,MY==0,MX==0,MV==0
        },
        1 => {
            lcddev.width = LCD_H;
            lcddev.height = LCD_W;
            lcd_WriteReg(0x36, (1 << 3) | (0 << 7) | (1 << 6) | (1 << 5)); //BGR==1,MY==1,MX==0,MV==1
        },
        2 => {
            lcddev.width = LCD_W;
            lcddev.height = LCD_H;
            lcd_WriteReg(0x36, (1 << 3) | (1 << 6) | (1 << 7)); //BGR==1,MY==0,MX==0,MV==0
        },
        3 => {
            lcddev.width = LCD_H;
            lcddev.height = LCD_W;
            lcd_WriteReg(0x36, (1 << 3) | (1 << 7) | (1 << 5)); //BGR==1,MY==1,MX==0,MV==1
        },
        else => {},
    }
}

// real shit
pub fn LCD_Init(reset: fn (i8) void, select: fn (i8) void, reg_select: fn (i8) void) void {
    lcddev.reset = tft_reset;
    lcddev.select = tft_select;
    lcddev.reg_select = tft_reg_select;
    if (false) {
        lcddev.reset = reset;
    }
    if (false) {
        lcddev.select = select;
    }
    if (false) {
        lcddev.reg_select = reg_select;
    }
    lcddev.select(1);
    LCD_Reset();
    // Initialization sequence for 2.2inch ILI9341
    LCD_WR_REG(0xCF);
    LCD_WR_DATA(0x00);
    LCD_WR_DATA(0xD9); // C1
    LCD_WR_DATA(0x30);
    LCD_WR_REG(0xED);
    LCD_WR_DATA(0x64);
    LCD_WR_DATA(0x03);
    LCD_WR_DATA(0x12);
    LCD_WR_DATA(0x81);
    LCD_WR_REG(0xE8);
    LCD_WR_DATA(0x85);
    LCD_WR_DATA(0x10);
    LCD_WR_DATA(0x7A);
    LCD_WR_REG(0xCB);
    LCD_WR_DATA(0x39);
    LCD_WR_DATA(0x2C);
    LCD_WR_DATA(0x00);
    LCD_WR_DATA(0x34);
    LCD_WR_DATA(0x02);
    LCD_WR_REG(0xF7);
    LCD_WR_DATA(0x20);
    LCD_WR_REG(0xEA);
    LCD_WR_DATA(0x00);
    LCD_WR_DATA(0x00);
    LCD_WR_REG(0xC0); // Power control
    LCD_WR_DATA(0x21); // VRH[5:0]  //1B
    LCD_WR_REG(0xC1); // Power control
    LCD_WR_DATA(0x12); // SAP[2:0];BT[3:0] //01
    LCD_WR_REG(0xC5); // VCM control
    LCD_WR_DATA(0x39); // 3F
    LCD_WR_DATA(0x37); // 3C
    LCD_WR_REG(0xC7); // VCM control2
    LCD_WR_DATA(0xAB); // B0
    LCD_WR_REG(0x36); // Memory Access Control
    LCD_WR_DATA(0x48);
    LCD_WR_REG(0x3A);
    LCD_WR_DATA(0x55);
    LCD_WR_REG(0xB1);
    LCD_WR_DATA(0x00);
    LCD_WR_DATA(0x1B); // 1A
    LCD_WR_REG(0xB6); // Display Function Control
    LCD_WR_DATA(0x0A);
    LCD_WR_DATA(0xA2);
    LCD_WR_REG(0xF2); // 3Gamma Function Disable
    LCD_WR_DATA(0x00);
    LCD_WR_REG(0x26); // Gamma curve selected
    LCD_WR_DATA(0x01);

    LCD_WR_REG(0xE0); // Set Gamma
    LCD_WR_DATA(0x0F);
    LCD_WR_DATA(0x23);
    LCD_WR_DATA(0x1F);
    LCD_WR_DATA(0x0B);
    LCD_WR_DATA(0x0E);
    LCD_WR_DATA(0x08);
    LCD_WR_DATA(0x4B);
    LCD_WR_DATA(0xA8);
    LCD_WR_DATA(0x3B);
    LCD_WR_DATA(0x0A);
    LCD_WR_DATA(0x14);
    LCD_WR_DATA(0x06);
    LCD_WR_DATA(0x10);
    LCD_WR_DATA(0x09);
    LCD_WR_DATA(0x00);
    LCD_WR_REG(0xE1); // Set Gamma
    LCD_WR_DATA(0x00);
    LCD_WR_DATA(0x1C);
    LCD_WR_DATA(0x20);
    LCD_WR_DATA(0x04);
    LCD_WR_DATA(0x10);
    LCD_WR_DATA(0x08);
    LCD_WR_DATA(0x34);
    LCD_WR_DATA(0x47);
    LCD_WR_DATA(0x44);
    LCD_WR_DATA(0x05);
    LCD_WR_DATA(0x0B);
    LCD_WR_DATA(0x09);
    LCD_WR_DATA(0x2F);
    LCD_WR_DATA(0x36);
    LCD_WR_DATA(0x0F);
    LCD_WR_REG(0x2B);
    LCD_WR_DATA(0x00);
    LCD_WR_DATA(0x00);
    LCD_WR_DATA(0x01);
    LCD_WR_DATA(0x3f);
    LCD_WR_REG(0x2A);
    LCD_WR_DATA(0x00);
    LCD_WR_DATA(0x00);
    LCD_WR_DATA(0x00);
    LCD_WR_DATA(0xef);
    LCD_WR_REG(0x11); // Exit Sleep
    cImport.nano_wait(120000000); // Wait 120 ms
    LCD_WR_REG(0x29); // Display on

    LCD_direction(0);
    lcddev.select(0);
}

// more lci setup for lcd
pub fn init_spi2_slow() void {
    RCC.AHBENR.modify(.{
        .GPIOBEN = 1,
    });
    RCC.APB1ENR.modify(.{
        .SPI2EN = 1,
    });
    SPI2.CR1.modify(.{
        .SPE = 0,
    });
    GPIOB.MODER.modify(.{
        .@"MODER[13]" = .Alternate,
        .@"MODER[14]" = .Alternate,
        .@"MODER[15]" = .Alternate,
    });
    GPIOB.AFR[1].modify(.{
        .@"AFR[5]" = 0,
        .@"AFR[6]" = 0,
        .@"AFR[7]" = 0,
    });
    SPI2.CR1.modify(.{ .BR = .Div256, .MSTR = .Master, .SSM = 1, .SSI = 1 });
    SPI2.CR2.modify(.{ .DS = .Bits8, .FRXTH = .Quarter });
    SPI2.CR1.modify(.{
        .SPE = 1,
    });
}

// more spi setup for lcd
pub fn sdcard_io_high_speed() void {
    SPI2.CR1.modify(.{
        .SPE = 0,
    });
    SPI2.CR1.modify(.{
        .BR = .Div4,
    });
    SPI2.CR1.modify(.{
        .SPE = 1,
    });
}

// sets up spi for lcd
pub fn init_lcd_spi() void {
    RCC.AHBENR.modify(.{
        .GPIOBEN = 1,
    });
    GPIOB.MODER.modify(.{
        .@"MODER[10]" = .Output,
        .@"MODER[11]" = .Output,
        .@"MODER[12]" = .Output,
    });
    init_spi2_slow();
    sdcard_io_high_speed();
}

// sets up LCD
pub fn LCD_Setup() void {
    init_lcd_spi();
    tft_select(0);
    tft_reset(0);
    tft_reg_select(0);
    LCD_Init(tft_reset, tft_select, tft_reg_select);
}

// idk ngl
pub fn LCD_WriteRAM_Prepare() void {
    LCD_WR_REG(lcddev.wramcmd);
}

// idk ngl
pub fn LCD_WriteData16_Prepare() void {
    lcddev.reg_select(0);
    SPI2.CR2.modify(.{ .DS = .Bits16 });
}

// Write 16-bit data
pub fn LCD_WriteData16(data: u16) void {
    while ((SPI2.SR.read().TXE == 1) == false) {}
    SPI2.DR16 = data;
}

// Finish writing 16-bit data
pub fn LCD_WriteData16_End() void {
    SPI2.CR2.modify(.{ .DS = .Bits8 });
}

// Sets "window" of frames desired to change
pub fn LCD_SetWindow(xStart: u16, yStart: u16, xEnd: u16, yEnd: u16) void {
    const xStartHigh: u8 = @truncate(xStart >> 8);
    const xStartLow: u8 = @truncate(0xFF & xStart);
    const xEndHigh: u8 = @truncate(xEnd >> 8);
    const xEndLow: u8 = @truncate(0xFF & xEnd);
    const yStartHigh: u8 = @truncate(yStart >> 8);
    const yStartLow: u8 = @truncate(0xFF & yStart);
    const yEndHigh: u8 = @truncate(yEnd >> 8);
    const yEndLow: u8 = @truncate(0xFF & yEnd);

    LCD_WR_REG(lcddev.setxcmd);
    LCD_WR_DATA(xStartHigh);
    LCD_WR_DATA(xStartLow);
    LCD_WR_DATA(xEndHigh);
    LCD_WR_DATA(xEndLow);
    LCD_WR_REG(lcddev.setycmd);
    LCD_WR_DATA(yStartHigh);
    LCD_WR_DATA(yStartLow);
    LCD_WR_DATA(yEndHigh);
    LCD_WR_DATA(yEndLow);

    LCD_WriteRAM_Prepare();
}

// sets the entire screen to a single color
pub fn LCD_Clear(color: u16) void {
    lcddev.select(1);
    var i: u16 = 0;
    var m: u16 = 0;
    LCD_SetWindow(0, 0, lcddev.width - 1, lcddev.height - 1);
    LCD_WriteData16_Prepare();
    i = 0;
    while (i < lcddev.height) {
        m = 0;
        while (m < lcddev.width) {
            LCD_WriteData16(color);
            m += 1;
        }
        i += 1;
    }
    LCD_WriteData16_End();
    lcddev.select(0);
}

pub fn _LCD_DrawChar(x: u16, y: u16, fc: u16, bc: u16, num: u8, size: u8) void {
    var temp: u32 = 0;
    var pos: u16 = 0;
    var t: u5 = 0;
    var shifted_temp: u16 = 0;
    // Parameters are const in zig
    const num_offset: u8 = num - ' ';
    const upperbound: u16 = 16;
    LCD_SetWindow(x, y, x + size - 1, y + upperbound - 1);
    LCD_WriteData16_Prepare();
    t = 0;
    while (t < upperbound) {
        pos = 0;
        while (pos < size) {
            temp = asc2_2616[num_offset][size - pos - 1];
            shifted_temp = @truncate(temp << t);
            if ((shifted_temp & 0x8000) > 0) {
                LCD_WriteData16(fc);
            } else {
                LCD_WriteData16(bc);
            }
            pos += 1;
        }
        t += 1;
    }
    LCD_WriteData16_End();
}

// sets up drawing char
pub fn LCD_DrawChar(x: u16, y: u16, fc: u16, bc: u16, num: u8, size: u8) void {
    lcddev.select(1);
    _LCD_DrawChar(x, y, fc, bc, num, size);
    lcddev.select(0);
}

// draws a string by iterating through DrawChar
pub fn LCD_DrawString(x: u16, y: u16, fc: u16, bg: u16, p: []const u8, size: u8) void {
    lcddev.select(1);
    var i: u8 = 0;
    const upperbound: i8 = 16;
    var varied_y: u16 = y;
    while ((p[i] <= '~') and (p[i] >= ' ')) {
        if (x > (lcddev.width - 1) or varied_y > (lcddev.height - 1))
            return;
        // Idk what u were trying to do here;  blame the shoddy ece362 code im ngl
        _LCD_DrawChar(x, varied_y, fc, bg, p[i], size);
        varied_y += upperbound;
        i += 0;
    }
    lcddev.select(0);
}

// draws a filled rectangle
pub fn _LCD_Fill(sx: u16, sy: u16, ex: u16, ey: u16, color: u16) void {
    var i: u16 = 0;
    var j: u16 = 0;
    const width: u16 = ex - sx + 1;
    const height: u16 = ey - sy + 1;
    LCD_SetWindow(sx, sy, ex, ey);
    LCD_WriteData16_Prepare();
    i = 0;
    while (i < height) {
        j = 0;
        while (j < width) {
            LCD_WriteData16(color);
            j += 1;
        }
        i += 1;
    }
    LCD_WriteData16_End();
}

// sets up drawing a filled rectangle
pub fn LCD_DrawFillRectangle(x1: u16, y1: u16, x2: u16, y2: u16, c: u16) void {
    lcddev.select(1);
    _LCD_Fill(x1, y1, x2, y2, c);
    lcddev.select(0);
}

// Shift screen up or down depending on the direction
pub fn shift_screen(dir: u1) void {
    // 0 = down, 1 = up
    // LCD_Clear(0xffff);
    // LCD_DrawFillRectangle(204, 0, 240, 320, LIGHTBLUE);
    // LCD_DrawString(209, 5, WHITE, LIGHTBLUE, MENU, 26);
    var i: u32 = 0;
    LCD_DrawFillRectangle(0, 0, 203, 320, WHITE); // loads white box for apps
    if (dir) {
        // loads apps when changing screen upward
        i = APP_NUM;
        while (i > (APP_NUM - 7)) {
            LCD_DrawString(173 - (28 * (i % 7)), 21, BLACK, WHITE, APPLIST[i], 26);
            if ((i % 7) == 0) // ends loading when reaching top of last bit of apps
            {
                i = APP_NUM - 7;
            }
            i -= 1;
        }
    } else {
        // loads apps when changing screens down
        i = APP_NUM;
        while (i < (APP_NUM + 7)) {
            LCD_DrawString(173 - (28 * (i % 7)), 21, BLACK, WHITE, APPLIST[i], 26);
            if (i >= (MAXAPPS - 1)) // ends loading when reaching end of apps
            {
                i = APP_NUM + 7;
            }
            i += 1;
        }
    }
}

// updates arrow and scroll bar
pub fn update_display() void {
    const change_amnt: u32 = APP_NUM % MAXAPPS; // for % of scroll bar calculations
    LCD_DrawFillRectangle(0, 0, 201, 21, WHITE);
    LCD_DrawChar(173 - (28 * (APP_NUM % 7)), 5, BLACK, WHITE, 62, 26); // each "line" for text is 28 pixels apart with max of 7 apps per line
    LCD_DrawFillRectangle(0, 310, 203, 320, GRAY);
    LCD_DrawFillRectangle(203 - (203 * (change_amnt + 1) / MAXAPPS), 310, 203 - (203 * change_amnt / MAXAPPS), 320, LIGHTGRAY); //percentage calcs for filling scroll bar
}

// Jumps to app description page
pub fn jump_to_app(appname: []const u8, authorfirst: []const u8, authorlast: []const u8) void {
    RUNNING_APP = 1;
    const by: []const u8 = "By:";
    const back: []const u8 = "Back";
    LCD_Clear(WHITE);
    LCD_DrawFillRectangle(204, 0, 240, 320, LIGHTBLUE); // menu background
    LCD_DrawString(209, 5, WHITE, LIGHTBLUE, appname, 26); // menu text
    LCD_DrawString(173, 5, BLACK, WHITE, by, 26);
    LCD_DrawString(173, 53, BLACK, WHITE, authorfirst, 26);
    LCD_DrawString(145, 53, BLACK, WHITE, authorlast, 26);
    LCD_DrawString(5, 21, BLACK, WHITE, back, 26);
    LCD_DrawChar(5, 5, BLACK, WHITE, 62, 26);
}

// Reloads the "Select App:" menu
pub fn reload_menu() void {
    RUNNING_APP = 0;
    var i: u32 = 0;
    const find_start: i32 = APP_NUM - (APP_NUM % 7);
    // SETS UP STARTING SCREEN
    LCD_Clear(WHITE);
    LCD_DrawFillRectangle(204, 0, 240, 320, LIGHTBLUE); // menu background
    LCD_DrawString(209, 5, WHITE, LIGHTBLUE, MENU, 26); // menu text
    // loads correct 7 applications
    i = find_start;
    while (i < (find_start + 7)) {
        LCD_DrawString(173 - (28 * (i % 7)), 21, BLACK, WHITE, APPLIST[i], 26);
        if (i >= (MAXAPPS - 1)) // ends loading when reaching end of apps
        {
            i = APP_NUM + 7;
        }
        i += 1;
    }
}

// Array for 16x26 font, used for writing text
const asc2_2616 = [95][26]u16{
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [ ]
    [_]u16{ 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03C0, 0x03C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x0000, 0x0000, 0x0000, 0x03E0, 0x03E0, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [!]
    [_]u16{ 0x1E3C, 0x1E3C, 0x1E3C, 0x1E3C, 0x1E3C, 0x1E3C, 0x1E3C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = ["]
    [_]u16{ 0x01CE, 0x03CE, 0x03DE, 0x039E, 0x039C, 0x079C, 0x3FFF, 0x7FFF, 0x0738, 0x0F38, 0x0F78, 0x0F78, 0x0E78, 0xFFFF, 0xFFFF, 0x1EF0, 0x1CF0, 0x1CE0, 0x3CE0, 0x3DE0, 0x39E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [#]
    [_]u16{ 0x03FC, 0x0FFE, 0x1FEE, 0x1EE0, 0x1EE0, 0x1EE0, 0x1EE0, 0x1FE0, 0x0FE0, 0x07E0, 0x03F0, 0x01FC, 0x01FE, 0x01FE, 0x01FE, 0x01FE, 0x01FE, 0x01FE, 0x3DFE, 0x3FFC, 0x0FF0, 0x01E0, 0x01E0, 0x0000, 0x0000, 0x0000 }, // Ascii = [$]
    [_]u16{ 0x3E03, 0xF707, 0xE78F, 0xE78E, 0xE39E, 0xE3BC, 0xE7B8, 0xE7F8, 0xF7F0, 0x3FE0, 0x01C0, 0x03FF, 0x07FF, 0x07F3, 0x0FF3, 0x1EF3, 0x3CF3, 0x38F3, 0x78F3, 0xF07F, 0xE03F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [%]
    [_]u16{ 0x07E0, 0x0FF8, 0x0F78, 0x1F78, 0x1F78, 0x1F78, 0x0F78, 0x0FF0, 0x0FE0, 0x1F80, 0x7FC3, 0xFBC3, 0xF3E7, 0xF1F7, 0xF0F7, 0xF0FF, 0xF07F, 0xF83E, 0x7C7F, 0x3FFF, 0x1FEF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [&]
    [_]u16{ 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03C0, 0x01C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [']
    [_]u16{ 0x003F, 0x007C, 0x01F0, 0x01E0, 0x03C0, 0x07C0, 0x0780, 0x0780, 0x0F80, 0x0F00, 0x0F00, 0x0F00, 0x0F00, 0x0F00, 0x0F00, 0x0F80, 0x0780, 0x0780, 0x07C0, 0x03C0, 0x01E0, 0x01F0, 0x007C, 0x003F, 0x000F, 0x0000 }, // Ascii = [(]
    [_]u16{ 0x7E00, 0x1F00, 0x07C0, 0x03C0, 0x01E0, 0x01F0, 0x00F0, 0x00F0, 0x00F8, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x00F8, 0x00F0, 0x00F0, 0x01F0, 0x01E0, 0x03C0, 0x07C0, 0x1F00, 0x7E00, 0x7800, 0x0000 }, // Ascii = [)]
    [_]u16{ 0x03E0, 0x03C0, 0x01C0, 0x39CE, 0x3FFF, 0x3F7F, 0x0320, 0x0370, 0x07F8, 0x0F78, 0x1F3C, 0x0638, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [*]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0xFFFF, 0xFFFF, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [+]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x01E0, 0x01E0, 0x01E0, 0x01C0, 0x0380 }, // Ascii = [,]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3FFE, 0x3FFE, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [-]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [.]
    [_]u16{ 0x000F, 0x000F, 0x001E, 0x001E, 0x003C, 0x003C, 0x0078, 0x0078, 0x00F0, 0x00F0, 0x01E0, 0x01E0, 0x03C0, 0x03C0, 0x0780, 0x0780, 0x0F00, 0x0F00, 0x1E00, 0x1E00, 0x3C00, 0x3C00, 0x7800, 0x7800, 0xF000, 0x0000 }, // Ascii = [/]
    [_]u16{ 0x07F0, 0x0FF8, 0x1F7C, 0x3E3E, 0x3C1E, 0x7C1F, 0x7C1F, 0x780F, 0x780F, 0x780F, 0x780F, 0x780F, 0x780F, 0x780F, 0x7C1F, 0x7C1F, 0x3C1E, 0x3E3E, 0x1F7C, 0x0FF8, 0x07F0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [0]
    [_]u16{ 0x00F0, 0x07F0, 0x3FF0, 0x3FF0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x3FFF, 0x3FFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [1]
    [_]u16{ 0x0FE0, 0x3FF8, 0x3C7C, 0x003C, 0x003E, 0x003E, 0x003E, 0x003C, 0x003C, 0x007C, 0x00F8, 0x01F0, 0x03E0, 0x07C0, 0x0780, 0x0F00, 0x1E00, 0x3E00, 0x3C00, 0x3FFE, 0x3FFE, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [2]
    [_]u16{ 0x0FF0, 0x1FF8, 0x1C7C, 0x003E, 0x003E, 0x003E, 0x003C, 0x003C, 0x00F8, 0x0FF0, 0x0FF8, 0x007C, 0x003E, 0x001E, 0x001E, 0x001E, 0x001E, 0x003E, 0x1C7C, 0x1FF8, 0x1FE0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [3]
    [_]u16{ 0x0078, 0x00F8, 0x00F8, 0x01F8, 0x03F8, 0x07F8, 0x07F8, 0x0F78, 0x1E78, 0x1E78, 0x3C78, 0x7878, 0x7878, 0xFFFF, 0xFFFF, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [4]
    [_]u16{ 0x1FFC, 0x1FFC, 0x1FFC, 0x1E00, 0x1E00, 0x1E00, 0x1E00, 0x1E00, 0x1FE0, 0x1FF8, 0x00FC, 0x007C, 0x003E, 0x003E, 0x001E, 0x003E, 0x003E, 0x003C, 0x1C7C, 0x1FF8, 0x1FE0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [5]
    [_]u16{ 0x01FC, 0x07FE, 0x0F8E, 0x1F00, 0x1E00, 0x3E00, 0x3C00, 0x3C00, 0x3DF8, 0x3FFC, 0x7F3E, 0x7E1F, 0x3C0F, 0x3C0F, 0x3C0F, 0x3C0F, 0x3E0F, 0x1E1F, 0x1F3E, 0x0FFC, 0x03F0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [6]
    [_]u16{ 0x3FFF, 0x3FFF, 0x3FFF, 0x000F, 0x001E, 0x001E, 0x003C, 0x0038, 0x0078, 0x00F0, 0x00F0, 0x01E0, 0x01E0, 0x03C0, 0x03C0, 0x0780, 0x0F80, 0x0F80, 0x0F00, 0x1F00, 0x1F00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [7]
    [_]u16{ 0x07F8, 0x0FFC, 0x1F3E, 0x1E1E, 0x3E1E, 0x3E1E, 0x1E1E, 0x1F3C, 0x0FF8, 0x07F0, 0x0FF8, 0x1EFC, 0x3E3E, 0x3C1F, 0x7C1F, 0x7C0F, 0x7C0F, 0x3C1F, 0x3F3E, 0x1FFC, 0x07F0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [8]
    [_]u16{ 0x07F0, 0x0FF8, 0x1E7C, 0x3C3E, 0x3C1E, 0x7C1F, 0x7C1F, 0x7C1F, 0x7C1F, 0x3C1F, 0x3E3F, 0x1FFF, 0x07EF, 0x001F, 0x001E, 0x001E, 0x003E, 0x003C, 0x38F8, 0x3FF0, 0x1FE0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [9]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [:]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x01E0, 0x01E0, 0x01E0, 0x03C0, 0x0380 }, // Ascii = [;]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0003, 0x000F, 0x003F, 0x00FC, 0x03F0, 0x0FC0, 0x3F00, 0xFE00, 0x3F00, 0x0FC0, 0x03F0, 0x00FC, 0x003F, 0x000F, 0x0003, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [<]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [=]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xE000, 0xF800, 0x7E00, 0x1F80, 0x07E0, 0x01F8, 0x007E, 0x001F, 0x007E, 0x01F8, 0x07E0, 0x1F80, 0x7E00, 0xF800, 0xE000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [>]
    [_]u16{ 0x1FF0, 0x3FFC, 0x383E, 0x381F, 0x381F, 0x001E, 0x001E, 0x003C, 0x0078, 0x00F0, 0x01E0, 0x03C0, 0x03C0, 0x07C0, 0x07C0, 0x0000, 0x0000, 0x0000, 0x07C0, 0x07C0, 0x07C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [?]
    [_]u16{ 0x03F8, 0x0FFE, 0x1F1E, 0x3E0F, 0x3C7F, 0x78FF, 0x79EF, 0x73C7, 0xF3C7, 0xF38F, 0xF38F, 0xF38F, 0xF39F, 0xF39F, 0x73FF, 0x7BFF, 0x79F7, 0x3C00, 0x1F1C, 0x0FFC, 0x03F8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [@]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x03E0, 0x03E0, 0x07F0, 0x07F0, 0x07F0, 0x0F78, 0x0F78, 0x0E7C, 0x1E3C, 0x1E3C, 0x3C3E, 0x3FFE, 0x3FFF, 0x781F, 0x780F, 0xF00F, 0xF007, 0xF007, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [A]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x3FF8, 0x3FFC, 0x3C3E, 0x3C1E, 0x3C1E, 0x3C1E, 0x3C3E, 0x3C7C, 0x3FF0, 0x3FF8, 0x3C7E, 0x3C1F, 0x3C1F, 0x3C0F, 0x3C0F, 0x3C1F, 0x3FFE, 0x3FF8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [B]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x01FF, 0x07FF, 0x1F87, 0x3E00, 0x3C00, 0x7C00, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7C00, 0x7C00, 0x3E00, 0x3F00, 0x1F83, 0x07FF, 0x01FF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [C]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x7FF0, 0x7FFC, 0x787E, 0x781F, 0x781F, 0x780F, 0x780F, 0x780F, 0x780F, 0x780F, 0x780F, 0x780F, 0x780F, 0x781F, 0x781E, 0x787E, 0x7FF8, 0x7FE0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [D]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x3FFF, 0x3FFF, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3FFE, 0x3FFE, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3FFF, 0x3FFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [E]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x1FFF, 0x1FFF, 0x1E00, 0x1E00, 0x1E00, 0x1E00, 0x1E00, 0x1E00, 0x1FFF, 0x1FFF, 0x1E00, 0x1E00, 0x1E00, 0x1E00, 0x1E00, 0x1E00, 0x1E00, 0x1E00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [F]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x03FE, 0x0FFF, 0x1F87, 0x3E00, 0x7C00, 0x7C00, 0x7800, 0xF800, 0xF800, 0xF87F, 0xF87F, 0x780F, 0x7C0F, 0x7C0F, 0x3E0F, 0x1F8F, 0x0FFF, 0x03FE, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [G]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x7C1F, 0x7C1F, 0x7C1F, 0x7C1F, 0x7C1F, 0x7C1F, 0x7C1F, 0x7C1F, 0x7FFF, 0x7FFF, 0x7C1F, 0x7C1F, 0x7C1F, 0x7C1F, 0x7C1F, 0x7C1F, 0x7C1F, 0x7C1F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [H]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x3FFF, 0x3FFF, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x3FFF, 0x3FFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [I]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x1FFC, 0x1FFC, 0x007C, 0x007C, 0x007C, 0x007C, 0x007C, 0x007C, 0x007C, 0x007C, 0x007C, 0x007C, 0x007C, 0x0078, 0x0078, 0x38F8, 0x3FF0, 0x3FC0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [J]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x3C1F, 0x3C1E, 0x3C3C, 0x3C78, 0x3CF0, 0x3DE0, 0x3FE0, 0x3FC0, 0x3F80, 0x3FC0, 0x3FE0, 0x3DF0, 0x3CF0, 0x3C78, 0x3C7C, 0x3C3E, 0x3C1F, 0x3C0F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [K]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3FFF, 0x3FFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [L]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0xF81F, 0xFC1F, 0xFC1F, 0xFE3F, 0xFE3F, 0xFE3F, 0xFF7F, 0xFF77, 0xFF77, 0xF7F7, 0xF7E7, 0xF3E7, 0xF3E7, 0xF3C7, 0xF007, 0xF007, 0xF007, 0xF007, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [M]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x7C0F, 0x7C0F, 0x7E0F, 0x7F0F, 0x7F0F, 0x7F8F, 0x7F8F, 0x7FCF, 0x7BEF, 0x79EF, 0x79FF, 0x78FF, 0x78FF, 0x787F, 0x783F, 0x783F, 0x781F, 0x781F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [N]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x07F0, 0x1FFC, 0x3E3E, 0x7C1F, 0x780F, 0x780F, 0xF80F, 0xF80F, 0xF80F, 0xF80F, 0xF80F, 0xF80F, 0x780F, 0x780F, 0x7C1F, 0x3E3E, 0x1FFC, 0x07F0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [O]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x3FFC, 0x3FFF, 0x3E1F, 0x3E0F, 0x3E0F, 0x3E0F, 0x3E0F, 0x3E1F, 0x3E3F, 0x3FFC, 0x3FF0, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x3E00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [P]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x07F0, 0x1FFC, 0x3E3E, 0x7C1F, 0x780F, 0x780F, 0xF80F, 0xF80F, 0xF80F, 0xF80F, 0xF80F, 0xF80F, 0x780F, 0x780F, 0x7C1F, 0x3E3E, 0x1FFC, 0x07F8, 0x007C, 0x003F, 0x000F, 0x0003, 0x0000 }, // Ascii = [Q]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x3FF0, 0x3FFC, 0x3C7E, 0x3C3E, 0x3C1E, 0x3C1E, 0x3C3E, 0x3C3C, 0x3CFC, 0x3FF0, 0x3FE0, 0x3DF0, 0x3CF8, 0x3C7C, 0x3C3E, 0x3C1E, 0x3C1F, 0x3C0F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [R]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x07FC, 0x1FFE, 0x3E0E, 0x3C00, 0x3C00, 0x3C00, 0x3E00, 0x1FC0, 0x0FF8, 0x03FE, 0x007F, 0x001F, 0x000F, 0x000F, 0x201F, 0x3C3E, 0x3FFC, 0x1FF0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [S]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [T]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x7C0F, 0x7C0F, 0x7C0F, 0x7C0F, 0x7C0F, 0x7C0F, 0x7C0F, 0x7C0F, 0x7C0F, 0x7C0F, 0x7C0F, 0x7C0F, 0x7C0F, 0x3C1E, 0x3C1E, 0x3E3E, 0x1FFC, 0x07F0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [U]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0xF007, 0xF007, 0xF807, 0x780F, 0x7C0F, 0x3C1E, 0x3C1E, 0x3E1E, 0x1E3C, 0x1F3C, 0x1F78, 0x0F78, 0x0FF8, 0x07F0, 0x07F0, 0x07F0, 0x03E0, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [V]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0xE003, 0xF003, 0xF003, 0xF007, 0xF3E7, 0xF3E7, 0xF3E7, 0x73E7, 0x7BF7, 0x7FF7, 0x7FFF, 0x7F7F, 0x7F7F, 0x7F7E, 0x3F7E, 0x3E3E, 0x3E3E, 0x3E3E, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [W]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0xF807, 0x7C0F, 0x3E1E, 0x3E3E, 0x1F3C, 0x0FF8, 0x07F0, 0x07E0, 0x03E0, 0x03E0, 0x07F0, 0x0FF8, 0x0F7C, 0x1E7C, 0x3C3E, 0x781F, 0x780F, 0xF00F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [X]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0xF807, 0x7807, 0x7C0F, 0x3C1E, 0x3E1E, 0x1F3C, 0x0F78, 0x0FF8, 0x07F0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [Y]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x7FFF, 0x7FFF, 0x000F, 0x001F, 0x003E, 0x007C, 0x00F8, 0x00F0, 0x01E0, 0x03E0, 0x07C0, 0x0F80, 0x0F00, 0x1E00, 0x3E00, 0x7C00, 0x7FFF, 0x7FFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [Z]
    [_]u16{ 0x07FF, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x07FF, 0x07FF, 0x0000 }, // Ascii = [[]
    [_]u16{ 0x7800, 0x7800, 0x3C00, 0x3C00, 0x1E00, 0x1E00, 0x0F00, 0x0F00, 0x0780, 0x0780, 0x03C0, 0x03C0, 0x01E0, 0x01E0, 0x00F0, 0x00F0, 0x0078, 0x0078, 0x003C, 0x003C, 0x001E, 0x001E, 0x000F, 0x000F, 0x0007, 0x0000 }, // Ascii = [\]
    [_]u16{ 0x7FF0, 0x00F0, 0x00F0, 0x00F0, 0x00F0, 0x00F0, 0x00F0, 0x00F0, 0x00F0, 0x00F0, 0x00F0, 0x00F0, 0x00F0, 0x00F0, 0x00F0, 0x00F0, 0x00F0, 0x00F0, 0x00F0, 0x00F0, 0x00F0, 0x00F0, 0x00F0, 0x7FF0, 0x7FF0, 0x0000 }, // Ascii = []]
    [_]u16{ 0x00C0, 0x01C0, 0x01C0, 0x03E0, 0x03E0, 0x07F0, 0x07F0, 0x0778, 0x0F78, 0x0F38, 0x1E3C, 0x1E3C, 0x3C1E, 0x3C1E, 0x380F, 0x780F, 0x7807, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [^]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000 }, // Ascii = [_]
    [_]u16{ 0x00F0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [`]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0FF8, 0x3FFC, 0x3C7C, 0x003E, 0x003E, 0x003E, 0x07FE, 0x1FFE, 0x3E3E, 0x7C3E, 0x783E, 0x7C3E, 0x7C7E, 0x3FFF, 0x1FCF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [a]
    [_]u16{ 0x3C00, 0x3C00, 0x3C00, 0x3C00, 0x3C00, 0x3C00, 0x3DF8, 0x3FFE, 0x3F3E, 0x3E1F, 0x3C0F, 0x3C0F, 0x3C0F, 0x3C0F, 0x3C0F, 0x3C0F, 0x3C1F, 0x3C1E, 0x3F3E, 0x3FFC, 0x3BF0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [b]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03FE, 0x0FFF, 0x1F87, 0x3E00, 0x3E00, 0x3C00, 0x7C00, 0x7C00, 0x7C00, 0x3C00, 0x3E00, 0x3E00, 0x1F87, 0x0FFF, 0x03FE, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [c]
    [_]u16{ 0x001F, 0x001F, 0x001F, 0x001F, 0x001F, 0x001F, 0x07FF, 0x1FFF, 0x3E3F, 0x3C1F, 0x7C1F, 0x7C1F, 0x7C1F, 0x781F, 0x781F, 0x7C1F, 0x7C1F, 0x3C3F, 0x3E7F, 0x1FFF, 0x0FDF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [d]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03F8, 0x0FFC, 0x1F3E, 0x3E1E, 0x3C1F, 0x7C1F, 0x7FFF, 0x7FFF, 0x7C00, 0x7C00, 0x3C00, 0x3E00, 0x1F07, 0x0FFF, 0x03FE, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [e]
    [_]u16{ 0x01FF, 0x03E1, 0x03C0, 0x07C0, 0x07C0, 0x07C0, 0x7FFF, 0x7FFF, 0x07C0, 0x07C0, 0x07C0, 0x07C0, 0x07C0, 0x07C0, 0x07C0, 0x07C0, 0x07C0, 0x07C0, 0x07C0, 0x07C0, 0x07C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [f]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07EF, 0x1FFF, 0x3E7F, 0x3C1F, 0x7C1F, 0x7C1F, 0x781F, 0x781F, 0x781F, 0x7C1F, 0x7C1F, 0x3C3F, 0x3E7F, 0x1FFF, 0x0FDF, 0x001E, 0x001E, 0x001E, 0x387C, 0x3FF8 }, // Ascii = [g]
    [_]u16{ 0x3C00, 0x3C00, 0x3C00, 0x3C00, 0x3C00, 0x3C00, 0x3DFC, 0x3FFE, 0x3F9E, 0x3F1F, 0x3E1F, 0x3C1F, 0x3C1F, 0x3C1F, 0x3C1F, 0x3C1F, 0x3C1F, 0x3C1F, 0x3C1F, 0x3C1F, 0x3C1F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [h]
    [_]u16{ 0x01F0, 0x01F0, 0x0000, 0x0000, 0x0000, 0x0000, 0x7FE0, 0x7FE0, 0x01E0, 0x01E0, 0x01E0, 0x01E0, 0x01E0, 0x01E0, 0x01E0, 0x01E0, 0x01E0, 0x01E0, 0x01E0, 0x01E0, 0x01E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [i]
    [_]u16{ 0x00F8, 0x00F8, 0x0000, 0x0000, 0x0000, 0x0000, 0x3FF8, 0x3FF8, 0x00F8, 0x00F8, 0x00F8, 0x00F8, 0x00F8, 0x00F8, 0x00F8, 0x00F8, 0x00F8, 0x00F8, 0x00F8, 0x00F8, 0x00F8, 0x00F8, 0x00F8, 0x00F0, 0x71F0, 0x7FE0 }, // Ascii = [j]
    [_]u16{ 0x3C00, 0x3C00, 0x3C00, 0x3C00, 0x3C00, 0x3C00, 0x3C1F, 0x3C3E, 0x3C7C, 0x3CF8, 0x3DF0, 0x3DE0, 0x3FC0, 0x3FC0, 0x3FE0, 0x3DF0, 0x3CF8, 0x3C7C, 0x3C3E, 0x3C1F, 0x3C1F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [k]
    [_]u16{ 0x7FF0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x01F0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [l]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF79E, 0xFFFF, 0xFFFF, 0xFFFF, 0xFBE7, 0xF9E7, 0xF1C7, 0xF1C7, 0xF1C7, 0xF1C7, 0xF1C7, 0xF1C7, 0xF1C7, 0xF1C7, 0xF1C7, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [m]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3DFC, 0x3FFE, 0x3F9E, 0x3F1F, 0x3E1F, 0x3C1F, 0x3C1F, 0x3C1F, 0x3C1F, 0x3C1F, 0x3C1F, 0x3C1F, 0x3C1F, 0x3C1F, 0x3C1F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [n]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07F0, 0x1FFC, 0x3E3E, 0x3C1F, 0x7C1F, 0x780F, 0x780F, 0x780F, 0x780F, 0x780F, 0x7C1F, 0x3C1F, 0x3E3E, 0x1FFC, 0x07F0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [o]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3DF8, 0x3FFE, 0x3F3E, 0x3E1F, 0x3C0F, 0x3C0F, 0x3C0F, 0x3C0F, 0x3C0F, 0x3C0F, 0x3C1F, 0x3E1E, 0x3F3E, 0x3FFC, 0x3FF8, 0x3C00, 0x3C00, 0x3C00, 0x3C00, 0x3C00 }, // Ascii = [p]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07EE, 0x1FFE, 0x3E7E, 0x3C1E, 0x7C1E, 0x781E, 0x781E, 0x781E, 0x781E, 0x781E, 0x7C1E, 0x7C3E, 0x3E7E, 0x1FFE, 0x0FDE, 0x001E, 0x001E, 0x001E, 0x001E, 0x001E }, // Ascii = [q]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1F7F, 0x1FFF, 0x1FE7, 0x1FC7, 0x1F87, 0x1F00, 0x1F00, 0x1F00, 0x1F00, 0x1F00, 0x1F00, 0x1F00, 0x1F00, 0x1F00, 0x1F00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [r]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07FC, 0x1FFE, 0x1E0E, 0x3E00, 0x3E00, 0x3F00, 0x1FE0, 0x07FC, 0x00FE, 0x003E, 0x001E, 0x001E, 0x3C3E, 0x3FFC, 0x1FF0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [s]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0780, 0x0780, 0x0780, 0x7FFF, 0x7FFF, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x07C0, 0x03FF, 0x01FF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [t]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3C1E, 0x3C1E, 0x3C1E, 0x3C1E, 0x3C1E, 0x3C1E, 0x3C1E, 0x3C1E, 0x3C1E, 0x3C1E, 0x3C3E, 0x3C7E, 0x3EFE, 0x1FFE, 0x0FDE, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [u]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF007, 0x780F, 0x780F, 0x3C1E, 0x3C1E, 0x3E1E, 0x1E3C, 0x1E3C, 0x0F78, 0x0F78, 0x0FF0, 0x07F0, 0x07F0, 0x03E0, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [v]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF003, 0xF1E3, 0xF3E3, 0xF3E7, 0xF3F7, 0xF3F7, 0x7FF7, 0x7F77, 0x7F7F, 0x7F7F, 0x7F7F, 0x3E3E, 0x3E3E, 0x3E3E, 0x3E3E, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [w]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7C0F, 0x3E1E, 0x3E3C, 0x1F3C, 0x0FF8, 0x07F0, 0x07F0, 0x03E0, 0x07F0, 0x07F8, 0x0FF8, 0x1E7C, 0x3E3E, 0x3C1F, 0x781F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [x]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF807, 0x780F, 0x7C0F, 0x3C1E, 0x3C1E, 0x1E3C, 0x1E3C, 0x1F3C, 0x0F78, 0x0FF8, 0x07F0, 0x07F0, 0x03E0, 0x03E0, 0x03C0, 0x03C0, 0x03C0, 0x0780, 0x0F80, 0x7F00 }, // Ascii = [y]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3FFF, 0x3FFF, 0x001F, 0x003E, 0x007C, 0x00F8, 0x01F0, 0x03E0, 0x07C0, 0x0F80, 0x1F00, 0x1E00, 0x3C00, 0x7FFF, 0x7FFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [z]
    [_]u16{ 0x01FE, 0x03E0, 0x03C0, 0x03C0, 0x03C0, 0x03C0, 0x01E0, 0x01E0, 0x01E0, 0x01C0, 0x03C0, 0x3F80, 0x3F80, 0x03C0, 0x01C0, 0x01E0, 0x01E0, 0x01E0, 0x03C0, 0x03C0, 0x03C0, 0x03C0, 0x03E0, 0x01FE, 0x007E, 0x0000 }, // Ascii = [{]
    [_]u16{ 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x0000 }, // Ascii = [|]
    [_]u16{ 0x3FC0, 0x03E0, 0x01E0, 0x01E0, 0x01E0, 0x01E0, 0x01C0, 0x03C0, 0x03C0, 0x01C0, 0x01E0, 0x00FE, 0x00FE, 0x01E0, 0x01C0, 0x03C0, 0x03C0, 0x01C0, 0x01E0, 0x01E0, 0x01E0, 0x01E0, 0x03E0, 0x3FC0, 0x3F00, 0x0000 }, // Ascii = [}]
    [_]u16{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3F07, 0x7FC7, 0x73E7, 0xF1FF, 0xF07E, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, // Ascii = [~]
};
